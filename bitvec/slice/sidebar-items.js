window.SIDEBAR_ITEMS = {"fn":[["from_mut","Converts a reference to `T` into a `BitSlice` over one element."],["from_raw_parts","Forms a bit-slice from a bit-pointer and a length."],["from_raw_parts_mut","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned."],["from_raw_parts_unchecked","Performs the same functionality as `from_raw_parts`, without checking the `len` argument."],["from_raw_parts_unchecked_mut","Performs the same functionality as `from_raw_parts_mut`, without checking the `len` argument."],["from_ref","Converts a reference to `T` into a `BitSlice` over one element."]],"struct":[["BitRefIter","An iterator over `BitSlice` that produces ordinary `&bool`. May be faster in some cases. Produced by [`Iter::by_ref`]."],["BitSlice","A slice of individual bits, anywhere in memory."],["BitValIter","An iterator over `BitSlice` that produces ordinary `bool`. May be faster in some cases. Produced by [`Iter::by_val`]."],["Chunks","An iterator over a `BitSlice` in (non-overlapping) chunks (`chunk_size` bits at a time), starting at the beginning of the slice."],["ChunksExact","An iterator over a `BitSlice` in (non-overlapping) chunks (`chunk_size` bits at a time), starting at the beginning of the slice."],["ChunksExactMut","An iterator over a `BitSlice` in (non-overlapping) mutable chunks (`chunk_size` bits at a time), starting at the beginning of the slice."],["ChunksMut","An iterator over a `BitSlice` in (non-overlapping) mutable chunks (`chunk_size` bits at a time), starting at the beginning of the slice."],["Iter","Immutable `BitSlice` iterator."],["IterMut","Mutable `BitSlice` iterator."],["IterOnes","Enumerates bits in a `BitSlice` that are set to `1`."],["IterZeros","Enumerates bits in a `BitSlice` that are cleared to `0`."],["RChunks","An iterator over a `BitSlice` in (non-overlapping) chunks (`chunk_size` bits at a time), starting at the end of the slice."],["RChunksExact","An iterator over a `BitSlice` in (non-overlapping) chunks (`chunk_size` bits at a time), starting at the end of the slice."],["RChunksExactMut","An iterator over a `BitSlice` in (non-overlapping) mutable chunks (`chunk_size` bits at a time), starting at the end of the slice."],["RChunksMut","An iterator over a `BitSlice` in (non-overlapping) mutable chunks (`chunk_size` bits at a time), starting at the end of the slice."],["RSplit","An iterator over subslices separated by bits that match a predicate function, starting from the end of the `BitSlice`."],["RSplitMut","An iterator over subslices separated by bits that match a predicate function, starting from the end of the `BitSlice`."],["RSplitN","An iterator over subslices separated by bits that match a predicate function, limited to a given number of splits, starting from the end of the `BitSlice`."],["RSplitNMut","An iterator over subslices separated by bits that match a predicate function, limited to a given number of splits, starting from the end of the `BitSlice`."],["Split","An iterator over subslices separated by bits that match a predicate function."],["SplitMut","An iterator over the mutable subslices which are separated by bits that match `pred`."],["SplitN","An iterator over subslices separated by bits that match a predicate function, limited to a given number of splits."],["SplitNMut","An iterator over subslices separated by bits that match a predicate function, limited to a given number of splits."],["Windows","An iterator over overlapping subslices of length `size`."]],"trait":[["BitSliceIndex","A helper trait used for indexing operations."]]};